<?php

namespace FernleafSystems\ApiWrappers\Pushover;

use FernleafSystems\ApiWrappers\Base\BaseApi;

/**
 * Class Api
 * @package FernleafSystems\ApiWrappers\FreeAgent
 * @property string $user_key - override connection
 */
class Api extends BaseApi {

	/**
	 * Allows for override of the Connection config for user key
	 * @return string
	 */
	public function getUserKey() {
		/** @var Connection $oConn */
		$oConn = $this->getConnection();
		$sKey = $this->getStringParam( 'user_key' );
		return empty( $sKey ) ? $oConn->user_key : $sKey;
	}

	/**
	 * @return bool
	 */
	public function isLastRequestSuccess() {
		$bSuccess = parent::isLastRequestSuccess(); // TODO: Change the autogenerated stub
		if ( $bSuccess ) {
			$aResp = $this->getDecodedResponseBody();
			$bSuccess = is_array( $aResp ) && isset( $aResp[ 'status' ] ) && $aResp[ 'status' ] == 1;
		}
		return $bSuccess;
	}

	/**
	 * @return array
	 */
	protected function prepFinalRequestData() {
		$this->setRequestDataItem( 'token', $this->getConnection()->api_key )
			 ->setRequestDataItem( 'user', $this->getUserKey() );
		return parent::prepFinalRequestData();
	}

	/**
	 * @throws \Exception
	 */
	protected function preSendVerification() {
		parent::preSendVerification();
		if ( strlen( $this->getUrlEndpoint() ) == 0 ) {
			throw new \Exception( 'Request Endpoint has not been provided' );
		}
		/** @var Connection $oConn */
		$oConn = $this->getConnection();
		if ( !$oConn->hasApiKey() ) {
			throw new \Exception( 'API Key has not been provided in the Connection' );
		}
		if ( strlen( $this->getUserKey() ) == 0 ) {
			throw new \Exception( 'User/Group Key has not been provided' );
		}
	}

	/**
	 * @param string $sValue
	 * @return $this
	 */
	public function setDevice( $sValue ) {
		return $this->setRequestDataItem( 'device', $sValue );
	}

	/**
	 * Use this to override the User Key set in the Connection
	 * @param string $sKey
	 * @return $this
	 */
	public function setUserKey( $sKey ) {
		return $this->setParam( 'user_key', $sKey );
	}
}